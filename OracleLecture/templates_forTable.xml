<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="insert/update/delete Data to/from table" enabled="true" name="_insert_update_delete">	public int insert_update_delete(${cursor} vo) {&#13;
		int res = 0; &#13;
		&#13;
		Connection        conn  = null;&#13;
		PreparedStatement pstmt = null;                                  &#13;
		String            sql   = "";&#13;
		&#13;
		try {&#13;
			//1. Connection 얻어오기&#13;
			conn = DBService.getInstance().getConnection();&#13;
			&#13;
			//2. PreparedStatment 얻어오기&#13;
			pstmt = conn.prepareStatement(sql);&#13;
			&#13;
			//3. parameter 세팅 [[ 데이터 타입에 맞추어 세팅해야함 ]]&#13;
			&#13;
			&#13;
			//3. DML(insert/update/delete) : res &lt;- 처리된 행수를 반환&#13;
			res = pstmt.executeUpdate();&#13;
&#13;
		} catch (Exception e) {&#13;
			&#13;
			e.printStackTrace();&#13;
			&#13;
		} finally {&#13;
			&#13;
			//닫기 (열린 역순으로)&#13;
			try {&#13;
				if (pstmt != null) pstmt.close();&#13;
				if (conn != null) conn.close();&#13;
			} catch (SQLException e2) {&#13;
				e2.printStackTrace();&#13;
			}&#13;
			&#13;
		}&#13;
		&#13;
		return res;&#13;
		&#13;
	}//end insert()</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_select_list">	//전체조회&#13;
	public List&lt;${argType}&gt; selectList(){&#13;
		&#13;
		List&lt;${argType}&gt; list = new ArrayList&lt;${argType}&gt;();&#13;
		&#13;
		Connection        conn  = null; //null을 일부로 초기값으로 설정&#13;
		PreparedStatement pstmt = null;&#13;
		ResultSet         rs    = null;&#13;
		String            sql   = "";&#13;
		&#13;
		try {&#13;
			&#13;
			//1. Connection 얻어오기&#13;
			conn = DBService.getInstance().getConnection();&#13;
			&#13;
			//2. PreparedStatment 얻어오기&#13;
			pstmt = conn.prepareStatement(sql);&#13;
			&#13;
			//3. ResultSet 얻어오기&#13;
			rs = pstmt.executeQuery();&#13;
			&#13;
			//4. 포장 (record -&gt; Vo -&gt; list)&#13;
			while (rs.next()) {&#13;
				&#13;
				//rs가 가리키는 레코드(행)의 값을 읽어오기&#13;
				&#13;
				&#13;
				//Vo로 포장&#13;
				${argType} vo = new ${argType}();&#13;
				&#13;
				&#13;
				//list에 추가&#13;
				list.add(vo);&#13;
				&#13;
			}&#13;
			&#13;
			&#13;
		} catch (Exception e) {&#13;
			&#13;
			e.printStackTrace();&#13;
			&#13;
		} finally{&#13;
			&#13;
			&#13;
			try {&#13;
				//연결(생성)되어 있을 시, close  --why? 다음 명령 위해 연결 해제&#13;
				if (rs != null) rs.close();&#13;
				&#13;
				if (pstmt != null) pstmt.close();&#13;
				&#13;
				if (conn != null) conn.close();&#13;
				&#13;
			} catch (SQLException e) {&#13;
				// TODO Auto-generated catch block&#13;
				e.printStackTrace();&#13;
			}&#13;
				&#13;
			&#13;
		}&#13;
		&#13;
		return list;&#13;
		&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_singleton">	//single-ton : 객체 1개만 생성해서 사용&#13;
	static ${primary_type_name} single = null;&#13;
	&#13;
	public static ${primary_type_name} getInstance() {&#13;
		&#13;
		//인스턴스 없으면 새로 생성&#13;
		if (single == null) {&#13;
			single = new ${primary_type_name}();&#13;
		}&#13;
		&#13;
		return single;&#13;
		&#13;
	}//getInstance()&#13;
	&#13;
	//외부에서 인스턴스 생성불가&#13;
	private ${primary_type_name}() {&#13;
		&#13;
	}</template></templates>